?   	apiserver/cmd/planetpulse	[no test files]
?   	apiserver/pkg/database	[no test files]
?   	apiserver/pkg/database/models	[no test files]
=== RUN   TestConfig
    test_error.go:59: MOCK ERROR LOG = server.go:57 (Internal Server Error) - Config File "config" Not Found in "[/home/elliot/go/src/github.com/RyanDevlin/planetpulse/api/apiserver/pkg/server]" (apiserver configuration failed).
    test_error.go:60: MOCK ERROR LOG = This error would have been fatal.
    config_test.go:70: Environment variable PLANET_DB_USER set to: 'planet_pulse'
    config_test.go:71: Environment variable PLANET_DB_PASS set to: '**************'
    config_test.go:72: Environment variable PLANET_DB_HOST set to: 'planetpulsedb.ch0g0ophcqsz.us-east-1.rds.amazonaws.com'
    config_test.go:74: Unsetting environment variables....
time="2021-08-12T14:55:22-04:00" level=error msg="'PLANET_DB_HOST' is a required environment variable."
time="2021-08-12T14:55:22-04:00" level=error msg="'PLANET_DB_USER' is a required environment variable."
time="2021-08-12T14:55:22-04:00" level=error msg="'PLANET_DB_PASS' is a required environment variable."
    test_error.go:59: MOCK ERROR LOG = server.go:57 (Internal Server Error) - failed to load one or more configuration parameters (apiserver configuration failed).
    test_error.go:60: MOCK ERROR LOG = This error would have been fatal.
    config_test.go:87: Resetting environment variables....
--- PASS: TestConfig (0.30s)
=== RUN   TestRoutes
    router_test.go:86: WARNING - The following path is defined in the OpenAPI spec file but is not defined in the Routes list: /v1/co2/weekly/{id}
    router_test.go:86: WARNING - The following path is defined in the OpenAPI spec file but is not defined in the Routes list: /v1/co2/weekly/{ppm}
    router_test.go:98: WARNING - The following path is defined in the Routes list but is not defined in the OpenAPI spec file: /favicon.ico
    router_test.go:102: There is a mismatch between the OpenAPI spec file (../../../openapi/spec-v1.json) and the routes defined in router.go
--- SKIP: TestRoutes (0.00s)
PASS
ok  	apiserver/pkg/server	0.311s
?   	apiserver/pkg/server/handlers	[no test files]
=== RUN   TestIncreaseGetAll
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetAll (0.00s)
=== RUN   TestIncreaseGetYear
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?year=2020
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE year in \('2020'\) ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetYear (0.00s)
=== RUN   TestIncreaseGetMonth
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?month=1
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE month in \('1'\) ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetMonth (0.00s)
=== RUN   TestIncreaseGetGt
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=128.89
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE increase_since_1800 > 128\.89 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
    main_test.go:252: Incorrect number of values returned from query.
--- FAIL: TestIncreaseGetGt (0.00s)
=== RUN   TestIncreaseGetGte
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gte=128.89
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE increase_since_1800 >= 128\.89 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
    main_test.go:252: Incorrect number of values returned from query.
--- FAIL: TestIncreaseGetGte (0.00s)
=== RUN   TestIncreaseGetLt
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lt=64.53
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE increase_since_1800 < 64\.53 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
    main_test.go:252: Incorrect number of values returned from query.
--- FAIL: TestIncreaseGetLt (0.00s)
=== RUN   TestIncreaseGetLte
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lte=64.53
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE increase_since_1800 <= 64\.53 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
    main_test.go:252: Incorrect number of values returned from query.
--- FAIL: TestIncreaseGetLte (0.00s)
=== RUN   TestIncreaseGetLimit
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?limit=2
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day LIMIT 2'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetLimit (0.00s)
=== RUN   TestIncreaseGetOffset
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?offset=4
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day OFFSET 4'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetOffset (0.00s)
=== RUN   TestIncreaseGetPage
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?limit=2&page=2
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day LIMIT 2 OFFSET 2'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestIncreaseGetPage (0.00s)
=== RUN   TestIncreaseGetCombo
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?year=1984,2000&month=1&gt=64.09&gte=64.53&lt=88.9&lte=88.88
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE (increase_since_1800 [<>=]+ [\d\.]+( AND )*|year in \(('[\d]+'(,)?[ ]*)*\)( AND )*|month in \(('[\d]+'(,)?[ ]*)*\)( AND )*)* ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
    main_test.go:275: Entry with day: '1' was not present in JSON response or appeared in an incorrect order.
    main_test.go:276: Wanted: '1', Got: '8'.
    main_test.go:275: Entry with day: '9' was not present in JSON response or appeared in an incorrect order.
    main_test.go:276: Wanted: '9', Got: '2'.
--- FAIL: TestIncreaseGetCombo (0.00s)
=== RUN   TestIncreaseErrors
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?year=2020a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, invalid date value: year=[2020a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, invalid date value: year=[2020a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?year=20200
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (invalid year value. Years must be between 0 and 3000: year=[20200]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "invalid year value. Years must be between 0 and 3000: year=[20200]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?month=1a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, invalid date value: month=[1a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, invalid date value: month=[1a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?month=14
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (invalid month value. Months must be between 1 and 12: month=[14]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "invalid month value. Months must be between 1 and 12: month=[14]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: gt=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: gt=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lt=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: lt=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: lt=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gte=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: gte=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: gte=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lte=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: lte=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: lte=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: gt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: gt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lt=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: lt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: lt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?lte=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: lte=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: lte=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=300&gt=400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: gt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: gt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=40000
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm query range is 0 to 1000: gt=[40000]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm query range is 0 to 1000: gt=[40000]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly/increase?gt=-1
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm query range is 0 to 1000: gt=[-1]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm query range is 0 to 1000: gt=[-1]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
--- PASS: TestIncreaseErrors (0.00s)
=== RUN   TestGetAll
    main_test.go:86: Attempting request: GET /v1/co2/weekly
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetAll (0.00s)
=== RUN   TestGetYear
    main_test.go:86: Attempting request: GET /v1/co2/weekly?year=2020
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE year in \('2020'\) ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetYear (0.00s)
=== RUN   TestGetMonth
    main_test.go:86: Attempting request: GET /v1/co2/weekly?month=1
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE month in \('1'\) ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetMonth (0.00s)
=== RUN   TestGetGt
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=405.68
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE average > 405\.68 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetGt (0.00s)
=== RUN   TestGetGte
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gte=405.68
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE average >= 405\.68 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetGte (0.00s)
=== RUN   TestGetLt
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lt=344.19
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE average < 344\.19 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetLt (0.00s)
=== RUN   TestGetLte
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lte=344.19
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE average <= 344\.19 ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetLte (0.00s)
=== RUN   TestGetLimit
    main_test.go:86: Attempting request: GET /v1/co2/weekly?limit=2
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day LIMIT 2'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 19,
        	            "DateDecimal": 1974.3795,
        	            "Average": 333.37,
        	            "NumDays": 5,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.4,
        	            "Timestamp": "1974-05-19T00:00:00Z"
        	        },
        	        {
        	            "Year": 1974,
        	            "Month": 5,
        	            "Day": 26,
        	            "DateDecimal": 1974.3986,
        	            "Average": 332.95,
        	            "NumDays": 6,
        	            "OneYearAgo": -999.99,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 50.06,
        	            "Timestamp": "1974-05-26T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetLimit (0.00s)
=== RUN   TestGetOffset
    main_test.go:86: Attempting request: GET /v1/co2/weekly?offset=4
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day OFFSET 4'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 9,
        	            "DateDecimal": 2000.0232,
        	            "Average": 369.03,
        	            "NumDays": 7,
        	            "OneYearAgo": 368.23,
        	            "TenYearsAgo": 353.63,
        	            "IncSincePreIndustrial": 88.88,
        	            "Timestamp": "2000-01-09T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 9,
        	            "Day": 2,
        	            "DateDecimal": 2018.6699,
        	            "Average": 405.68,
        	            "NumDays": 7,
        	            "OneYearAgo": 404.11,
        	            "TenYearsAgo": 383.72,
        	            "IncSincePreIndustrial": 128.89,
        	            "Timestamp": "2018-09-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2018,
        	            "Month": 10,
        	            "Day": 7,
        	            "DateDecimal": 2018.7657,
        	            "Average": 405.77,
        	            "NumDays": 7,
        	            "OneYearAgo": 403.58,
        	            "TenYearsAgo": 383.01,
        	            "IncSincePreIndustrial": 129.42,
        	            "Timestamp": "2018-10-07T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 2,
        	            "Day": 2,
        	            "DateDecimal": 2020.0887,
        	            "Average": 414.53,
        	            "NumDays": 7,
        	            "OneYearAgo": 411.31,
        	            "TenYearsAgo": 390.87,
        	            "IncSincePreIndustrial": 133.87,
        	            "Timestamp": "2020-02-02T00:00:00Z"
        	        },
        	        {
        	            "Year": 2020,
        	            "Month": 5,
        	            "Day": 24,
        	            "DateDecimal": 2020.3948,
        	            "Average": 417.67,
        	            "NumDays": 7,
        	            "OneYearAgo": 414.62,
        	            "TenYearsAgo": 392.85,
        	            "IncSincePreIndustrial": 134.36,
        	            "Timestamp": "2020-05-24T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetOffset (0.00s)
=== RUN   TestGetPage
    main_test.go:86: Attempting request: GET /v1/co2/weekly?limit=2&page=2
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo ORDER BY year,month,day LIMIT 2 OFFSET 2'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 1,
        	            "DateDecimal": 1984.0013,
        	            "Average": 344.19,
        	            "NumDays": 5,
        	            "OneYearAgo": 341.51,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.53,
        	            "Timestamp": "1984-01-01T00:00:00Z"
        	        },
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetPage (0.00s)
=== RUN   TestGetCombo
    main_test.go:86: Attempting request: GET /v1/co2/weekly?year=1984,2000&month=1&gt=344.19&gte=343.89&lt=369.03&lte=368.89
    main_test.go:128: SQL query: 'SELECT \* FROM public\.co2_weekly_mlo WHERE (average [<>=]+ [\d\.]+( AND )*|year in \(('[\d]+'(,)?[ ]*)*\)( AND )*|month in \(('[\d]+'(,)?[ ]*)*\)( AND )*)* ORDER BY year,month,day'
    test_utils.go:69: Server Response: 
        	Status Code: 200
        	Header Content-Type: application/json; charset=UTF-8
        	Body: 
        	{
        	    "Results": [
        	        {
        	            "Year": 1984,
        	            "Month": 1,
        	            "Day": 8,
        	            "DateDecimal": 1984.0205,
        	            "Average": 343.89,
        	            "NumDays": 6,
        	            "OneYearAgo": 341.86,
        	            "TenYearsAgo": -999.99,
        	            "IncSincePreIndustrial": 64.09,
        	            "Timestamp": "1984-01-08T00:00:00Z"
        	        },
        	        {
        	            "Year": 2000,
        	            "Month": 1,
        	            "Day": 2,
        	            "DateDecimal": 2000.0042,
        	            "Average": 368.89,
        	            "NumDays": 7,
        	            "OneYearAgo": 367.99,
        	            "TenYearsAgo": 353.64,
        	            "IncSincePreIndustrial": 88.9,
        	            "Timestamp": "2000-01-02T00:00:00Z"
        	        }
        	    ],
        	    "Status": "OK",
        	    "RequestId": "0"
        	}
        
--- PASS: TestGetCombo (0.00s)
=== RUN   TestErrors
    main_test.go:86: Attempting request: GET /v1/co2/weekly?year=2020a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, invalid date value: year=[2020a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, invalid date value: year=[2020a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?year=20200
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (invalid year value. Years must be between 0 and 3000: year=[20200]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "invalid year value. Years must be between 0 and 3000: year=[20200]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?month=1a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, invalid date value: month=[1a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, invalid date value: month=[1a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?month=14
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (invalid month value. Months must be between 1 and 12: month=[14]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "invalid month value. Months must be between 1 and 12: month=[14]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: gt=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: gt=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lt=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: lt=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: lt=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gte=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: gte=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: gte=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lte=400a
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm value should be a decimal number: lte=[400a]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm value should be a decimal number: lte=[400a]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: gt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: gt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lt=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: lt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: lt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?lte=300,400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: lte=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: lte=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=300&gt=400
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, too many ppm constraints: gt=[300,400]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, too many ppm constraints: gt=[300,400]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=40000
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm query range is 0 to 1000: gt=[40000]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm query range is 0 to 1000: gt=[40000]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
    main_test.go:86: Attempting request: GET /v1/co2/weekly?gt=-1
    test_error.go:63: MOCK ERROR LOG = utils.go:48 (Bad Request) - error when parsing query parameters (malformed query parameters, ppm query range is 0 to 1000: gt=[-1]).
    test_utils.go:69: Server Response: 
        	Status Code: 400
        	Header Content-Type: application/json; charset=utf-8
        	Body: 
        	{
        	    "Description": "Bad Request",
        	    "Content": {
        	        "Code": 400,
        	        "Message": "malformed query parameters, ppm query range is 0 to 1000: gt=[-1]"
        	    }
        	}
        
    main_test.go:325: Response code '400: Bad Request'. This is correct.
--- PASS: TestErrors (0.00s)
FAIL
FAIL	apiserver/pkg/server/handlers/co2	0.010s
?   	apiserver/pkg/utils	[no test files]
FAIL
